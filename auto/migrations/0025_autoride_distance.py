# Generated by Django 4.1.7 on 2023-03-28 06:38

from math import atan2, cos, radians, sin, sqrt
from typing import List, Tuple, TypeVar, Union

from django.db import migrations, models

from auto.models import AutoRide, GPSData

Point_ = TypeVar("Point_", bound=Union[List[float], Tuple[float, float]])


def set_my_defaults(apps, schema_editor):
    rides = apps.get_model("auto", "AutoRide")
    for ride in rides.objects.all().iterator():
        ride.distance = get_distance(ride)
        ride.save()


def get_distance(ride: AutoRide, to_km: bool = True) -> float:
    coordinates = GPSData.objects.filter(
        vehicle_id=ride.vehicle_id, timestamp__range=(ride.start_date, ride.end_date)
    ).values_list("point", flat=True)

    i = 0
    total_distance = 0

    while i < len(coordinates) - 1:
        point_1 = coordinates[i]
        point_2 = coordinates[i + 1]
        total_distance += distance_between_coordinates(point_1, point_2)
        i += 1

    if to_km:
        return round(total_distance / 1000, 2)
    return round(total_distance, 2)


def distance_between_coordinates(start: Point_, end: Point_):
    R = 6371000
    lon1, lat1 = start
    lon2, lat2 = end
    d_lat = radians(lat2 - lat1)
    d_lon = radians(lon2 - lon1)
    a = (sin(d_lat / 2) ** 2) + cos(radians(lat1)) * cos(radians(lat2)) * (sin(d_lon / 2) ** 2)
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return round(distance, 2)


def reverse_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("auto", "0024_autoride_end_point_autoride_start_point"),
    ]

    operations = [
        migrations.AddField(
            model_name="autoride",
            name="distance",
            field=models.DecimalField(decimal_places=2, default=1, max_digits=8, verbose_name="Пробег, км"),
            preserve_default=False,
        ),
        migrations.RunPython(set_my_defaults, reverse_func),
        migrations.AlterField(
            model_name="autoride",
            name="distance",
            field=models.DecimalField(decimal_places=2, max_digits=8, verbose_name="Пробег, км"),
        ),
    ]
